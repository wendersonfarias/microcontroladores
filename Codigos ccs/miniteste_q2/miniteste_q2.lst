CCS PCM C Compiler, Version 4.104, 5967               04-abr-23 12:06

               Filename: C:\Users\wende\Desktop\MICRO\microcontroladores\Codigos ccs\miniteste_q2\miniteste_q2.lst

               ROM used: 193 words (2%)
                         Largest free fragment is 2048
               RAM used: 19 (5%) at main() level
                         19 (5%) worst case
               Stack:    1 worst case (0 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   06E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... //#include "C:\Users\wende\Desktop\MICRO\microcontroladores\Codigos ccs\miniteste_q2\miniteste_q2.h" 
.................... /*#include <16F877A.h> 
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=20000000) 
....................  
.................... int16 led1, led2, led3, led4, led5; 
....................  
.................... #int_RTCC 
.................... void  RTCC_isr(void)  
.................... { 
....................     
....................     
....................    if(++led3 > 109 ){ 
....................       output_toggle(PIN_D5); 
....................       led3 = 0; 
....................    } 
....................     
....................    if(++led4 > 71){ 
....................       output_toggle(PIN_D4); 
....................       led4 = 0; 
....................    } 
....................     
....................    if(++led5 > 40){ 
....................       output_toggle(PIN_D3); 
....................       led5 = 0; 
....................    } 
....................     
....................    set_timer0(get_timer1()+12); 
....................     
....................     
.................... } 
....................  
....................  
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... {   
....................     
....................     
....................    if(++led1 >50 /2){ 
....................       output_toggle(PIN_D7); 
....................       led1 = 0; 
....................    } 
....................     
....................    if(++led2 > 250 /2 ){ 
....................       output_toggle(PIN_D6); 
....................       led2 = 0; 
....................    } 
....................     
....................   set_timer1(get_timer1() + 15536 ); 
....................  
.................... } 
....................  
....................  
....................  
.................... void main() 
.................... { 
....................  
....................    setup_adc_ports(NO_ANALOGS); 
....................    setup_adc(ADC_CLOCK_DIV_2); 
....................    setup_psp(PSP_DISABLED); 
....................    setup_spi(SPI_SS_DISABLED); 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2); //overflow a cada 102 us 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);  //overflow a cada 13,1 ms 
....................    setup_timer_2(T2_DISABLED,0,1); 
....................    setup_comparator(NC_NC_NC_NC); 
....................    setup_vref(FALSE); 
....................    enable_interrupts(INT_RTCC); 
....................    enable_interrupts(INT_TIMER1); 
....................    enable_interrupts(GLOBAL); 
....................     
....................    //overlow a cada 100us 
....................     
....................    set_timer0(6);    // preencho timer0 para contar 6 a 255] 
....................     
....................    //overflow a cada 10ms 
....................    set_timer1(15536 ); // preencho o timer1 para contar 15536 ate 65536  
....................  
....................    while(TRUE); 
....................  
.................... }*/ 
....................  
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc = 8 
.................... #FUSES NOWDT, HS, NOPUT, NOPROTECT, NODEBUG, BROWNOUT, NOLVP, NOCPD, NOWRT, NOWRT 
.................... #use delay(clock = 20MHz) 
....................  
.................... unsigned int16 cont1 = 0, cont2 = 0, cont3 = 0; 
....................  
.................... #int_TIMER0 
.................... void TIMER0_isr(void){ 
....................    if(++cont1 >= 394/2)  { cont1 = 0; output_toggle(pin_B0) ; }  
*
002F:  INCF   27,F
0030:  BTFSC  03.2
0031:  INCF   28,F
0032:  MOVF   28,F
0033:  BTFSS  03.2
0034:  GOTO   039
0035:  MOVF   27,W
0036:  SUBLW  C4
0037:  BTFSC  03.0
0038:  GOTO   040
0039:  CLRF   28
003A:  CLRF   27
003B:  BSF    03.5
003C:  BCF    06.0
003D:  MOVLW  01
003E:  BCF    03.5
003F:  XORWF  06,F
....................    if(++cont2 >= 1927/2) {cont2 = 0;output_toggle(pin_B1); } 
0040:  INCF   29,F
0041:  BTFSC  03.2
0042:  INCF   2A,F
0043:  MOVF   2A,W
0044:  SUBLW  02
0045:  BTFSC  03.0
0046:  GOTO   055
0047:  XORLW  FF
0048:  BTFSS  03.2
0049:  GOTO   04E
004A:  MOVF   29,W
004B:  SUBLW  C2
004C:  BTFSC  03.0
004D:  GOTO   055
004E:  CLRF   2A
004F:  CLRF   29
0050:  BSF    03.5
0051:  BCF    06.1
0052:  MOVLW  02
0053:  BCF    03.5
0054:  XORWF  06,F
....................    if(++cont3 >= 822/2) {cont3 = 0; output_toggle(pin_B2); } 
0055:  INCF   2B,F
0056:  BTFSC  03.2
0057:  INCF   2C,F
0058:  MOVF   2C,W
0059:  SUBLW  00
005A:  BTFSC  03.0
005B:  GOTO   06A
005C:  XORLW  FF
005D:  BTFSS  03.2
005E:  GOTO   063
005F:  MOVF   2B,W
0060:  SUBLW  9A
0061:  BTFSC  03.0
0062:  GOTO   06A
0063:  CLRF   2C
0064:  CLRF   2B
0065:  BSF    03.5
0066:  BCF    06.2
0067:  MOVLW  04
0068:  BCF    03.5
0069:  XORWF  06,F
.................... } 
....................  
006A:  BCF    0B.2
006B:  BCF    0A.3
006C:  BCF    0A.4
006D:  GOTO   01B
.................... void main(){ 
006E:  CLRF   04
006F:  BCF    03.7
0070:  MOVLW  1F
0071:  ANDWF  03,F
0072:  CLRF   28
0073:  CLRF   27
0074:  CLRF   2A
0075:  CLRF   29
0076:  CLRF   2C
0077:  CLRF   2B
0078:  BSF    03.5
0079:  BSF    1F.0
007A:  BSF    1F.1
007B:  BSF    1F.2
007C:  BCF    1F.3
007D:  MOVLW  07
007E:  MOVWF  1C
....................    setup_adc_ports(NO_ANALOGS); 
*
0082:  BSF    03.5
0083:  BSF    1F.0
0084:  BSF    1F.1
0085:  BSF    1F.2
0086:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0087:  BCF    03.5
0088:  BCF    1F.0
....................    setup_psp(PSP_DISABLED); 
0089:  BSF    03.5
008A:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
008B:  BCF    03.5
008C:  BCF    14.5
008D:  BCF    2D.5
008E:  MOVF   2D,W
008F:  BSF    03.5
0090:  MOVWF  07
0091:  BCF    03.5
0092:  BSF    2D.4
0093:  MOVF   2D,W
0094:  BSF    03.5
0095:  MOVWF  07
0096:  BCF    03.5
0097:  BCF    2D.3
0098:  MOVF   2D,W
0099:  BSF    03.5
009A:  MOVWF  07
009B:  MOVLW  01
009C:  BCF    03.5
009D:  MOVWF  14
009E:  MOVLW  00
009F:  BSF    03.5
00A0:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_1); // overflow 51,2 us 
00A1:  MOVF   01,W
00A2:  ANDLW  C7
00A3:  IORLW  08
00A4:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
00A5:  BCF    03.5
00A6:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
00A7:  MOVLW  00
00A8:  MOVWF  78
00A9:  MOVWF  12
00AA:  MOVLW  00
00AB:  BSF    03.5
00AC:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
00AD:  MOVLW  07
00AE:  MOVWF  1C
00AF:  MOVF   05,W
00B0:  MOVWF  05
00B1:  MOVLW  10
00B2:  MOVWF  77
00B3:  DECFSZ 77,F
00B4:  GOTO   0B3
00B5:  NOP
00B6:  MOVF   1C,W
00B7:  BCF    03.5
00B8:  BCF    0D.6
....................    setup_vref(FALSE); 
00B9:  BSF    03.5
00BA:  CLRF   1D
....................    enable_interrupts(INT_TIMER0); 
00BB:  BCF    03.5
00BC:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
00BD:  MOVLW  C0
00BE:  IORWF  0B,F
....................    //disable_interrupts(GLOBAL); 
....................     
....................    while(true); 
00BF:  GOTO   0BF
.................... } 
00C0:  SLEEP

Configuration Fuses:
   Word  1: 3F7A   HS NOWDT NOPUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
