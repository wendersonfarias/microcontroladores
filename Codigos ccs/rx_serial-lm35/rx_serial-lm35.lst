CCS PCM C Compiler, Version 4.104, 5967               28-mar-23 02:16

               Filename: C:\Users\wende\Desktop\MICRO\microcontroladores\Codigos ccs\rx_serial-lm35\rx_serial-lm35.lst

               ROM used: 283 words (3%)
                         Largest free fragment is 2048
               RAM used: 16 (4%) at main() level
                         25 (7%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0AF
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.5
001A:  GOTO   01D
001B:  BTFSC  0C.5
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
.................... //#include "C:\Users\wende\Desktop\MICRO\microcontroladores\Codigos ccs\rx_serial-lm35\rx_serial-lm35.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=20000000) 
.................... #use rs232(baud=1200,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=sensor) 
....................  
.................... int1 flagI = 0, flagF =0,flagM = 0,flagT = 0; 
.................... int8 valor; 
.................... int8 recebido; 
....................  
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
....................    recebido = getc(); 
*
0031:  BTFSS  0C.5
0032:  GOTO   031
0033:  MOVF   1A,W
0034:  MOVWF  29
....................    if(recebido == 'i'){ 
0035:  MOVF   29,W
0036:  SUBLW  69
0037:  BTFSS  03.2
0038:  GOTO   03A
....................       flagI = 1; 
0039:  BSF    27.0
....................    } 
....................    if(recebido == 'f'  ){ 
003A:  MOVF   29,W
003B:  SUBLW  66
003C:  BTFSS  03.2
003D:  GOTO   03F
....................        flagF = 1; 
003E:  BSF    27.1
....................    } 
....................    if(recebido == 'm' ){ 
003F:  MOVF   29,W
0040:  SUBLW  6D
0041:  BTFSS  03.2
0042:  GOTO   044
....................        flagM = 1; 
0043:  BSF    27.2
....................    } 
....................    if(recebido == 't' ){ 
0044:  MOVF   29,W
0045:  SUBLW  74
0046:  BTFSS  03.2
0047:  GOTO   049
....................        flagT = 1; 
0048:  BSF    27.3
....................    } 
....................    if (flagI == 1 && flagF == 1 && flagM == 1 && flagT == 1 ){ 
0049:  BTFSS  27.0
004A:  GOTO   05C
004B:  BTFSS  27.1
004C:  GOTO   05C
004D:  BTFSS  27.2
004E:  GOTO   05C
004F:  BTFSS  27.3
0050:  GOTO   05C
....................        valor = recebido; 
0051:  MOVF   29,W
0052:  MOVWF  28
....................        output_toggle(PIN_D1); 
0053:  BSF    03.5
0054:  BCF    08.1
0055:  MOVLW  02
0056:  BCF    03.5
0057:  XORWF  08,F
....................        flagI = 0; 
0058:  BCF    27.0
....................        flagF = 0; 
0059:  BCF    27.1
....................        flagM = 0; 
005A:  BCF    27.2
....................        flagT = 0; 
005B:  BCF    27.3
....................       
....................    } 
.................... } 
....................  
....................  
....................  
005C:  BCF    0C.5
005D:  BCF    0A.3
005E:  BCF    0A.4
005F:  GOTO   01D
.................... void main() 
.................... { 
*
00AF:  CLRF   04
00B0:  BCF    03.7
00B1:  MOVLW  1F
00B2:  ANDWF  03,F
00B3:  MOVLW  FF
00B4:  BSF    03.5
00B5:  MOVWF  19
00B6:  MOVLW  A2
00B7:  MOVWF  18
00B8:  MOVLW  90
00B9:  BCF    03.5
00BA:  MOVWF  18
00BB:  BCF    27.0
00BC:  BCF    27.1
00BD:  BCF    27.2
00BE:  BCF    27.3
00BF:  BSF    03.5
00C0:  BSF    1F.0
00C1:  BSF    1F.1
00C2:  BSF    1F.2
00C3:  BCF    1F.3
00C4:  MOVLW  07
00C5:  MOVWF  1C
....................  
....................    setup_adc_ports(NO_ANALOGS); 
*
00C9:  BSF    03.5
00CA:  BSF    1F.0
00CB:  BSF    1F.1
00CC:  BSF    1F.2
00CD:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
00CE:  BCF    1F.6
00CF:  BCF    03.5
00D0:  BCF    1F.6
00D1:  BCF    1F.7
00D2:  BSF    03.5
00D3:  BCF    1F.7
00D4:  BCF    03.5
00D5:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
00D6:  BSF    03.5
00D7:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
00D8:  BCF    03.5
00D9:  BCF    14.5
00DA:  BCF    2A.5
00DB:  MOVF   2A,W
00DC:  BSF    03.5
00DD:  MOVWF  07
00DE:  BCF    03.5
00DF:  BSF    2A.4
00E0:  MOVF   2A,W
00E1:  BSF    03.5
00E2:  MOVWF  07
00E3:  BCF    03.5
00E4:  BCF    2A.3
00E5:  MOVF   2A,W
00E6:  BSF    03.5
00E7:  MOVWF  07
00E8:  MOVLW  01
00E9:  BCF    03.5
00EA:  MOVWF  14
00EB:  MOVLW  00
00EC:  BSF    03.5
00ED:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
00EE:  MOVF   01,W
00EF:  ANDLW  C7
00F0:  IORLW  08
00F1:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
00F2:  BCF    03.5
00F3:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
00F4:  MOVLW  00
00F5:  MOVWF  78
00F6:  MOVWF  12
00F7:  MOVLW  00
00F8:  BSF    03.5
00F9:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
00FA:  MOVLW  07
00FB:  MOVWF  1C
00FC:  MOVF   05,W
00FD:  MOVWF  05
00FE:  MOVLW  10
00FF:  MOVWF  77
0100:  DECFSZ 77,F
0101:  GOTO   100
0102:  NOP
0103:  MOVF   1C,W
0104:  BCF    03.5
0105:  BCF    0D.6
....................    setup_vref(FALSE); 
0106:  BSF    03.5
0107:  CLRF   1D
....................    enable_interrupts(INT_RDA); 
0108:  BSF    0C.5
....................    enable_interrupts(GLOBAL); 
0109:  MOVLW  C0
010A:  BCF    03.5
010B:  IORWF  0B,F
....................  
....................    while(TRUE){ 
....................       //valor = make16(parteBaixa,parteAlta); 
....................        
....................       fprintf(sensor, "%u \n", valor); 
010C:  MOVF   28,W
010D:  MOVWF  2B
010E:  MOVLW  1B
010F:  MOVWF  2C
0110:  GOTO   075
0111:  MOVLW  20
0112:  BTFSS  0C.4
0113:  GOTO   112
0114:  MOVWF  19
0115:  MOVLW  0A
0116:  BTFSS  0C.4
0117:  GOTO   116
0118:  MOVWF  19
....................    } 
0119:  GOTO   10C
....................  
.................... } 
011A:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
